When a new account is added or edited then the database is automatically updated. There is no need for the user to click a Save button.

In preferences, the user will be able to specify a default database to use. They can open another database by using File->Open.

The search box will work like the search in iTunes. The search will be performed each time a letter is entered. This is quicker than having to wait for the user to hit enter.

By tabbing off the search box the focus will go to the list where the user can move up and down to select the account they want. From there they can tab to the "Copy Userid" button.

The database can be stored at a remote location accessible from multiple machines. It can be accessed using HTTP. The HTTP location can be protected using basic authentication. The filename of the database is an autogenerated string so that it can't be easily googled. 

The main screen will be small and only contain essential controls and information. This includes...
* List of accounts
* Account search input field
* Copy username button
* Copy password button
* Add account button
* Edit account button

---+++ Problems
   * I'd like to use the AES or Blowfish ciphers but JCE PBE only seems to support DES
   * *Answer:* I think for now I'll just go along with DES. I can look into getting something else up and running later. Prehaps my own implementation of an AES/Blowfish PBE Cipher.

   * Should I use 
      * CipherOutputStream with ObjectOutputStream
      * SealedObject with basic FileOutput
      * CipherOutputStream with custom file format
   * *Answer:* Writing Java objects directly to the database would make my life easier but it would close the database to my application only. If someone wanted to write their own implementation then they'd have a hard time trying to deserialise the Java object. The best approach is probably to serialise the object to some string format and then encrypt that and push it through the CipherOutputStream.
   
   * Whichever solution I use should I store the whole database in memory?
   * *Answer:* For now yes, it's too small a database to be worried about indexing, etc.

   * How should I protect in memory passwords (need to protect all bar the account name)?
   * *Answer:* Each item should be encrypted in the object and only decrypted when needed. This will mean double encryption when it's been pushed into CipherOutputStream but that shouldn't be a problem