Responsible for managing a collection of accounts.

The entire database will be read into memory when it's opened. Each Account will be decrypted and held in memory.

---++ Class: PasswordDatabase

---+++ Methods
*public PasswordDatabase(String databaseFileName)*
This constructor opens the given database file

*public void open(String databaseFileName)*
This method opens the given database file.

*public void addAccount(Account account)*
Adds the given Account to the database

*public Account getAccount(String name)*
Gets the given Account

*public void save()*
Saves the database. This involves flatpacking the 
DatabaseHeader and the AccountInformation objects, 
encrypting the flatpacked string and then writing
it out to the database file


During normal usage, should the DatabaseHeader and 
AccountInformation objects hold their data in proper 
object level variables or in the flat packed string?

They should probably be held in object level variables.
When the object is being saved the flatpack method will
be called which will return a string.

.User Edit's an Account
.User clicks OK to confirm the edits
.The data on the screen is copied back to the AccountInformation
object
.A database save is then initiated
.The flatpack method is called on each AccountInformation
.Only those that have changed (are dirty) will be repacked. The
rest will have the flat pack string buffered

The flatPack Method
-------------------
An object will have attributes
By calling flatPack you get back a packed version of those attributes
Internally the object will only do the flat pack processing if the object is dirty
If it's not then it will return the existing packed string
The only difference from one object to the next is the attributes on it

When I declare an attribute I also want the super class to be aware that it needs to be serialised
I can do this by putting it in a holder and adding the holder to an ArrayList
When I set an attribute I simple call the set method on the holder
